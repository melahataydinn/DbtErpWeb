@model Deneme_proje.Models.ServisEntities.IsEmirleri
@{
    ViewData["Title"] = "Servis Formu ve Liste";
}

<!-- Stil tanımları -->
<style>
    /* Ana tablo container'ı */
    .table-container {
        width: 100%;
        margin: 15px 0;
    }

    /* Masaüstü görünümü için tablo stilleri */
    @@media (min-width: 992px) {
        .table td {
            padding: 12px 8px;
        }
        /* Input genişlikleri */
        .table input.form-control-sm {
            height: 35px;
            padding: 6px 12px;
            font-size: 14px;
        }
        /* Her sütun için ideal genişlikler */
        .col-yedek-no {
            width: 15%;
        }

        .col-yedek-adi {
            width: 25%;
        }

        .col-adet {
            width: 10%;
        }

        .col-birim-fiyat {
            width: 15%;
        }

        .col-tutar {
            width: 15%;
        }

        .col-durum {
            width: 10%;
        }

        .col-islem {
            width: 10%;
        }
    }

    /* Tablet görünümü */
    @@media (min-width: 768px) and (max-width: 991px) {
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .table td {
            padding: 8px 6px;
        }

        .table input.form-control-sm {
            height: 32px;
            padding: 4px 8px;
            font-size: 13px;
        }
    }

    /* Mobil görünüm */
    @@media (max-width: 767px) {
        /* Tabloyu kart formatına çevir */
        .table,
        .table thead,
        .table tbody,
        .table tr,
        .table th,
        .table td {
            display: block;
            width: 100%;
        }

            .table thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
            }

            .table tr {
                margin-bottom: 15px;
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 10px;
            }

            .table td {
                position: relative;
                padding: 8px 8px 8px 50%;
                text-align: left;
                border: none;
                border-bottom: 1px solid #eee;
            }

                .table td:last-child {
                    border-bottom: none;
                }

                .table td:before {
                    position: absolute;
                    left: 8px;
                    width: 45%;
                    padding-right: 10px;
                    white-space: nowrap;
                    font-weight: bold;
                    content: attr(data-label);
                }
            /* Input alanları için mobil stil */
            .table input.form-control-sm {
                width: 100%;
                height: 35px;
                margin: 5px 0;
            }
            /* Durum ve butonlar için özel stil */
            .table td .btn {
                width: 100%;
                margin-top: 5px;
            }

        .active-status,
        .red-status {
            display: inline-block;
            width: 100%;
            text-align: center;
            padding: 5px;
            border-radius: 4px;
        }
    }
</style>
<style>
    .container-wrapper {
        display: flex;
        justify-content: space-between;
        gap: 20px;
    }

    .form-container {
        flex: 0.35; /* Servis formunu küçült */
        padding: 20px;
        /*   border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
        background-color: #f9f9f9;
    }

    .list-container {
        flex: 0.65; /* Listeyi genişlet */
        padding: 20px;
        /*  border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); */
        background-color: #f9f9f9;
    }

    h2 {
        text-align: center;
        margin-bottom: 20px;
    }





    .form-row {
        display: flex;
        justify-content: space-between;
    }

        .form-row .form-group {
            flex: 1;
            margin-right: 10px;
        }

            .form-row .form-group:last-child {
                margin-right: 0;
            }

    .button-row {
        text-align: center;
        margin-top: 20px;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .servis-table {
        font-size: 12px;
    }

    .modal-backdrop {
        z-index: -1;
    }
</style>
<style>
    .accordion-header {
        cursor: pointer;
        position: relative;
    }

        .accordion-header:hover {
            background-color: #f8f9fa;
        }

    .nested-table-container {
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 4px;
    }

    .active-status {
        color: green;
        font-weight: bold;
    }

    .red-status {
        color: red;
        font-weight: bold;
    }

    .accordion-content {
        display: none;
        background-color: #fff;
    }

        /* Açık durum için ek stil */
        .accordion-content.show {
            display: table-row;
        }
</style>
<style>
    .form-container {
        padding: 20px;
    }

    .form-row {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group.no {
            width: 100%;
        }

    .form-control-sm {
        height: calc(1.5em + 0.5rem + 2px);
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    /* Stok/Hizmet tablosu için stiller */
    .table-responsive {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    /* Toplam alanları için stiller */
    .totals {
        margin-top: 20px;
        text-align: right;
    }

        .totals p {
            margin-bottom: 5px;
        }

    /* Buton satırı için stiller */
    .button-row {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        justify-content: flex-end;
    }
</style>

<div class="main-content mt-5 pt-5">
    <div class="px-lg-5 px-3">
        <div class="row">
            <!-- Form Container -->
            <div class="form-container">
                <h2>Servis Formu</h2>
                <form asp-action="IsEmriGiris" method="post">
                    <div class="form-row">
                        <!-- No ve Tarih -->
                        <div class="form-group">
                            <label>Onarım Tarihi</label>
                            <input asp-for="Tarih" class="form-control form-control-sm" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                        </div>
                        <div class="form-group">
                            <label for="modalServisMerkezi" class="form-label">Servis Merkezi</label>
                            <select class="form-control" id="modalServisMerkezi" name="Servis_Merkezi" required>
                                <option value="">Seçiniz</option>
                                <option value="Hatay">Hatay</option>
                                <option value="Mersin">Mersin</option>
                                <option value="Sakarya">Sakarya</option>
                            </select>

                        </div>
                        <div class="form-group no">
                            <label>No</label>
                            <input asp-for="No" class="form-control form-control-sm" readonly />
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Müşteri Adı</label>
                        <input asp-for="MusteriAdi" class="form-control form-control-sm" required />
                    </div>
                    <div class="form-group">
                        <label>Getiren Şoför Adı</label>
                        <input asp-for="SoforAdi" class="form-control form-control-sm" required />
                    </div>

                    <div class="form-group">
                        <label>Şoför İrtibat Numarası</label>
                        <input asp-for="SoforTelefon" class="form-control form-control-sm" required />
                    </div>

                    <div class="form-group">
                        <label>Plaka No</label>
                        <input asp-for="PlakaNo" class="form-control form-control-sm" required />
                    </div>

                    <div class="form-group">
                        <label>Cihaz Marka / Model</label>
                        <input asp-for="CihazMarkaModel" class="form-control form-control-sm" required />
                    </div>
                    <div class="form-group">
                        <label>Teknisyen Adı</label>
                        <input asp-for="TeknisyenAdi" class="form-control form-control-sm" required />
                    </div>

                    <div class="form-group">
                        <label>Çalışma Saati</label>
                        <input asp-for="CalismaSaati" class="form-control form-control-sm" type="number" required />
                    </div>

                    <div class="form-group">
                        <label>Servise Giriş Tarihi</label>
                        <input asp-for="ServiseGirisTarihi" class="form-control form-control-sm" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="form-group">
                        <label>İş Türü</label>
                        <select asp-for="IsTuru" class="form-control form-control-sm" required>
                            <option value="">Seçiniz</option>
                            <option value="Motor">Motor</option>
                            <option value="Dorse">Dorse</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>İlk Gözlem</label>
                        <textarea asp-for="IlkGozlem" class="form-control form-control-sm" required></textarea>
                    </div>

                    <h3 class="d-flex justify-content-between align-items-center">
                        Stok / Hizmet Listesi
                        <button type="button" class="btn btn-success btn-sm" id="add-row-btn">+</button>
                    </h3>

                    <div class="table-responsive">
                        <table class="table table-sm" id="stok-hizmet-listesi">
                            <thead>
                                <tr>
                                    <th>Yedek Parça No</th>
                                    <th>Yedek Parça Adı</th>
                                    <th>Adet</th>
                                    <th>Birim Fiyat</th>
                                    <th>İşçilik Tutarı</th>
                                    <th>Harici İşçilik Tutarı</th>
                                    <th>Tutar</th>
                                    <th>İşlem</th>
                                </tr>
                            </thead>
                            <tbody id="stok-hizmet-body">
                                <tr>
                                    <td><input type="text" name="StokHizmet[0].YedekParcaNo" class="form-control form-control-sm" /></td>
                                    <td><input type="text" name="StokHizmet[0].YedekParcaAdi" class="form-control form-control-sm" /></td>
                                    <td><input type="number" name="StokHizmet[0].Adet" class="form-control form-control-sm" oninput="calculateTutar(this)" /></td>
                                    <td><input type="number" name="StokHizmet[0].BirimFiyat" class="form-control form-control-sm" step="0.01" oninput="calculateTutar(this)" /></td>
                                    <td><input type="number" name="StokHizmet[0].IscilikTutari" class="form-control form-control-sm" oninput="calculateTutar(this)" /></td>
                                    <td><input type="number" name="StokHizmet[0].HariciIscilikTutari" class="form-control form-control-sm" oninput="calculateTutar(this)" /></td>
                                    <td><input type="number" name="StokHizmet[0].Tutar" class="form-control form-control-sm" step="0.01" readonly /></td>
                                    <td><button type="button" class="btn btn-danger btn-sm" onclick="removeRow(this)">Sil</button></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="totals">
                        <p>A Toplam: <span id="a-toplam">0.00</span></p>
                        <p>Vergi (%20): <span id="vergi">0.00</span></p>
                        <p>G Toplam: <span id="g-toplam">0.00</span></p>
                        <input type="hidden" id="hidden-a-toplam" name="AToplam" />
                        <input type="hidden" id="hidden-vergi" name="Vergi" />
                        <input type="hidden" id="hidden-g-toplam" name="GToplam" />
                    </div>

                    <div class="button-row">
                        <button style="margin-top:20px;b height:30px;" type="reset" class="btn btn-warning btn-sm">Temizle</button>
                        <div class="button-row">
                            <!-- Varsayılan olarak Kaydet butonu -->
                            <button id="submit-button" type="submit" class="btn btn-primary btn-sm">Kaydet</button>
                        </div>

                    </div>
                </form>
            </div>

            <!-- List Container -->
            <div class="list-container">
                <h2>Servis Hareketleri Listesi</h2>
                @if (ViewBag.ServisHareketGruplari != null)
                {
                    <table class="table table-bordered table-sm">
                        <thead>
                            <tr>
                                <th>Detay</th>
                                <th>Evrak No</th>
                                <th>Servis Merkezi</th>
                                <th>Müşteri</th>
                                <th>Plaka No</th>
                                <th>Tarih</th>
                                <th>Model</th>
                                <th>Çalışma Saati</th>
                                <th>Durum</th>
                                <th>İşlem</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var grup in (IEnumerable<IGrouping<dynamic, Deneme_proje.Models.ServisEntities.IsEmirleri>>)ViewBag.ServisHareketGruplari)
                            {
                                var firstItem = grup.FirstOrDefault();
                                if (firstItem != null)
                                {
                                    bool allRejected = grup.All(item => item.Durum == 0);
                                    <tr class="accordion-header">
                                        <td>
                                            <i class="fas fa-chevron-down toggle-icon"></i>
                                        </td>
                                        <td>@grup.Key.EvrakNo</td>
                                        <td>@grup.Key.Servis_Merkezi</td>
                                        <td>@firstItem.MusteriAdi</td>
                                        <td>@firstItem.PlakaNo</td>
                                        <td>@firstItem.Tarih.ToString("yyyy-MM-dd")</td>
                                        <td>@firstItem.CihazMarkaModel</td>
                                        <td>@firstItem.CalismaSaati</td>
                                        <td class="@(allRejected ? "red-status" : "active-status")">
                                            @(allRejected ? "Red Edildi" : "Aktif")
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-primary btn-sm evrak-duzenle-btn" data-evrakno="@grup.Key.EvrakNo">Düzenle</button>
                                            @if (!allRejected)
                                            {
                                                <button type="button" class="btn btn-danger btn-sm evrak-red-btn" data-evrakno="@grup.Key.EvrakNo">Red</button>
                                            }
                                        </td>
                                    </tr>
                                    <tr class="accordion-content" style="display: none;">
                                        <td colspan="9">
                                            <div class="nested-table-container">
                                                <table class="table table-striped table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th>Yedek Parça No</th>
                                                            <th>Yedek Parça Adı</th>
                                                            <th>Adet</th>
                                                            <th>Birim Fiyat</th>
                                                            <th>Tutar</th>
                                                            <th>Durum</th>
                                                            <th>İşlem</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in grup)
                                                        {
                                                            <tr>
                                                                <td>@item.YedekParcaNo</td>
                                                                <td>@item.YedekParcaAdi</td>
                                                                <td>@item.Adet</td>
                                                                <td>@item.BirimFiyat</td>
                                                                <td>@item.Tutar</td>
                                                                <td class="@(item.Durum == 1 ? "active-status" : "red-status")">
                                                                    @(item.Durum == 1 ? "Aktif" : "Red Edildi")
                                                                </td>
                                                                <td>
                                                                    @if (item.Durum == 1)
                                                                    {
                                                                        <button type="button" class="btn btn-danger btn-sm satir-red-btn"
                                                                                data-evrakno="@item.EvrakNo"
                                                                                data-evraksirano="@item.EvrakSiraNo">
                                                                            Red
                                                                        </button>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>Gösterilecek veri bulunamadı.</p>
                }
                <a href="/ServisHareketleri/AllIsEmri" class="btn btn-success btn-sm">
                    Tüm Kayıtları Görüntüle
                </a>
            </div>

        </div>
    </div>
</div>

<!-- Modal Yapısı -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Servis Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editForm" method="post">
                    <input type="hidden" id="modalEvrakNo" name="evrakNo">

                    <div class="form-row">
                        <div class="form-group">
                            <label for="modalTarih" class="form-label">Onarım Tarihi</label>
                            <input type="date" class="form-control" id="modalTarih" name="tarih">
                        </div>
                        <div class="form-group">
                            <label for="modalServisMerkezi" class="form-label">Servis Merkezi</label>
                            <select class="form-control" id="modalServisMerkezi" name="Servis_Merkezi">
                                <option value="">Seçiniz</option>
                                <option value="Hatay">Hatay</option>
                                <option value="Mersin">Mersin</option>
                                <option value="Sakarya">Sakarya</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="modalNo" class="form-label">No</label>
                            <input type="text" class="form-control" id="modalNo" name="no" readonly>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="modalMusteriAdi" class="form-label">Müşteri Adı</label>
                        <input type="text" class="form-control" id="modalMusteriAdi" name="musteriAdi">
                    </div>

                    <div class="form-group">
                        <label for="modalSoforAdi" class="form-label">Getiren Şoför Adı</label>
                        <input type="text" class="form-control" id="modalSoforAdi" name="soforAdi">
                    </div>

                    <div class="form-group">
                        <label for="modalSoforTelefon" class="form-label">Şoför İrtibat Numarası</label>
                        <input type="text" class="form-control" id="modalSoforTelefon" name="soforTelefon">
                    </div>

                    <div class="form-group">
                        <label for="modalPlakaNo" class="form-label">Plaka No</label>
                        <input type="text" class="form-control" id="modalPlakaNo" name="plakaNo">
                    </div>

                    <div class="form-group">
                        <label for="modalCihazMarkaModel" class="form-label">Cihaz Marka/Model</label>
                        <input type="text" class="form-control" id="modalCihazMarkaModel" name="cihazMarkaModel">
                    </div>

                    <div class="form-group">
                        <label for="modalTeknisyenAdi" class="form-label">Teknisyen Adı</label>
                        <input type="text" class="form-control" id="modalTeknisyenAdi" name="teknisyenAdi">
                    </div>

                    <div class="form-group">
                        <label for="modalCalismaSaati" class="form-label">Çalışma Saati</label>
                        <input type="number" class="form-control" id="modalCalismaSaati" name="calismaSaati">
                    </div>

                    <div class="form-group">
                        <label for="modalServiseGirisTarihi" class="form-label">Servise Giriş Tarihi</label>
                        <input type="date" class="form-control" id="modalServiseGirisTarihi" name="serviseGirisTarihi">
                    </div>

                    <div class="form-group">
                        <label for="modalIsTuru" class="form-label">İş Türü</label>
                        <select class="form-control" id="modalIsTuru" name="isTuru">
                            <option value="">Seçiniz</option>
                            <option value="Motor">Motor</option>
                            <option value="Dorse">Dorse</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="modalIlkGozlem" class="form-label">İlk Gözlem</label>
                        <textarea class="form-control" id="modalIlkGozlem" name="ilkGozlem"></textarea>
                    </div>

                    <!-- Stok Hizmet Listesi Tablosu -->
                    <div class="table-responsive">
                        <table class="table table-sm" id="modal-stok-hizmet-listesi">
                            <thead>
                                <tr>
                                    <th>Yedek Parça No</th>
                                    <th>Yedek Parça Adı</th>
                                    <th>Adet</th>
                                    <th>Birim Fiyat</th>
                                    <th>İşçilik Tutarı</th>
                                    <th>Harici İşçilik Tutarı</th>
                                    <th>Tutar</th>
                                    <th>İşlem</th>
                                </tr>
                            </thead>
                            <tbody id="modal-stok-hizmet-body">
                                <!-- Dinamik olarak doldurulacak -->
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success btn-sm" id="modal-add-row-btn">+</button>
                    </div>

                    <!-- Totals for Modal -->
                    <div class="totals">
                        <p>A Toplam: <span id="modal-a-toplam">0.00</span></p>
                        <p>Vergi (%20): <span id="modal-vergi">0.00</span></p>
                        <p>G Toplam: <span id="modal-g-toplam">0.00</span></p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="saveChanges">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- JS kısmı -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Form doğrulama script
        const form = document.querySelector('form[asp-action="IsEmriGiris"]');
        if (form) {
            form.addEventListener('submit', function() {
                const rows = document.querySelectorAll('#stok-hizmet-body tr');
                rows.forEach(row => {
                    const iscilikTutariInput = row.querySelector('input[name$=".IscilikTutari"]');
                    const hariciIscilikTutariInput = row.querySelector('input[name$=".HariciIscilikTutari"]');

                    // Boş işçilik değerlerini 0 olarak ata
                    if (!iscilikTutariInput.value) {
                        iscilikTutariInput.value = "0";
                    }

                    if (!hariciIscilikTutariInput.value) {
                        hariciIscilikTutariInput.value = "0";
                    }
                });

                // Toplam değerleri güncelle
                updateTotals();
            });
        }

        // Akordeon işlevselliği


        // "+" butonu için olay dinleyici ekle
         document.addEventListener('DOMContentLoaded', function() {
        // Akordeon başlıklarına tıklama olayı
        function setupAccordionHandlers() {
            const accordionHeaders = document.querySelectorAll('.accordion-header');
            accordionHeaders.forEach(header => {
                header.addEventListener('click', function(e) {
                    // Eğer tıklanan element bir buton değilse
                    if (!e.target.closest('button')) {
                        // Bir sonraki elementi bul (content kısmı)
                        const content = this.nextElementSibling;

                        // Toggle görünürlük
                        if (content.style.display === 'none' || content.style.display === '') {
                            content.style.display = 'table-row';
                        } else {
                            content.style.display = 'none';
                        }
                    }
                });
            });
        }

        // Düzenleme butonu için gelişmiş olay dinleyicisi
       function setupEditButtonHandlers() {
        const editButtons = document.querySelectorAll('.evrak-duzenle-btn');
        editButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                event.stopPropagation();

                const evrakNo = this.getAttribute('data-evrakno');

                fetch(`/ServisHareketleri/GetEvrakDetayFull?evrakNo=${evrakNo}`)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.message || 'Bilinmeyen bir hata oluştu');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hata kontrolü
                        if (data.success === false) {
                            throw new Error(data.message || 'Bilinmeyen bir hata oluştu');
                        }

                        // Modal input alanlarını doldur
                        document.getElementById('modalEvrakNo').value = data.evrakNo || '';
                        document.getElementById('modalTarih').value = data.tarih || '';

                        // Evrak No ve Servis Merkezi veritabanından gelip değiştirilemez olmalı
                        const noInput = document.getElementById('modalNo');
                        noInput.value = data.no || '';
                        noInput.setAttribute('readonly', 'readonly');

                        const servisMerkeziSelect = document.getElementById('modalServisMerkezi');
                        servisMerkeziSelect.value = data.servisMerkezi || '';
                        servisMerkeziSelect.setAttribute('disabled', 'disabled');

                        // Diğer alanları doldur
                        document.getElementById('modalMusteriAdi').value = data.musteriAdi || '';
                        document.getElementById('modalSoforAdi').value = data.soforAdi || '';
                        document.getElementById('modalSoforTelefon').value = data.soforTelefon || '';
                        document.getElementById('modalPlakaNo').value = data.plakaNo || '';
                        document.getElementById('modalCihazMarkaModel').value = data.cihazMarkaModel || '';
                        document.getElementById('modalTeknisyenAdi').value = data.teknisyenAdi || '';
                        document.getElementById('modalCalismaSaati').value = data.calismaSaati || '';
                        document.getElementById('modalServiseGirisTarihi').value = data.serviseGirisTarihi || '';
                        document.getElementById('modalIsTuru').value = data.isTuru || '';
                        document.getElementById('modalIlkGozlem').value = data.ilkGozlem || '';


                        // Toplam değerler
                        document.getElementById('modal-a-toplam').textContent = data.aToplam || '0.00';
                        document.getElementById('modal-vergi').textContent = data.vergi || '0.00';
                        document.getElementById('modal-g-toplam').textContent = data.gToplam || '0.00';

                        // Stok/Hizmet listesi tablosunu doldur
                        const tableBody = document.getElementById('modal-stok-hizmet-body');
                        tableBody.innerHTML = ''; // Önceki satırları temizle

                        // Detay kayıtları varsa tabloya ekle
                        const stokHizmetListesi = data.stokHizmetListesi || [];

                        console.log("Stok Hizmet Listesi:", stokHizmetListesi);

                        if (stokHizmetListesi.length > 0) {
                            stokHizmetListesi.forEach((item, index) => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaNo" value="${item.yedekParcaNo || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaAdi" value="${item.yedekParcaAdi || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Adet" value="${item.adet || 0}" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].BirimFiyat" value="${item.birimFiyat || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].IscilikTutari" value="${item.iscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].HariciIscilikTutari" value="${item.hariciIscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Tutar" value="${item.tutar || 0}" class="form-control form-control-sm" step="0.01" readonly></td>
                                    <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
                                `;
                                tableBody.appendChild(row);
                            });
                        } else {
                            // Boş bir satır ekle
                            addModalRow();
                        }

                        // Toplam değerleri hesapla ve güncelle
                        calculateModalTotals();

                        // Modal'ı aç
                        const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                        editModal.show();
                    })
                    .catch(error => {
                        console.error('Detaylı Hata:', error);
                        alert(`Evrak bilgileri yüklenirken hata: ${error.message}`);
                    });
            });
        });
    }

        // Modal için tutar hesaplama fonksiyonu
        function calculateModalTutar(inputElement) {
            const row = inputElement.closest('tr');

            // Gerekli tüm girdileri al
            const adetInput = row.querySelector('input[name$=".Adet"]');
            const birimFiyatInput = row.querySelector('input[name$=".BirimFiyat"]');
            const iscilikTutariInput = row.querySelector('input[name$=".IscilikTutari"]');
            const hariciIscilikTutariInput = row.querySelector('input[name$=".HariciIscilikTutari"]');
            const tutarInput = row.querySelector('input[name$=".Tutar"]');

            if (adetInput && birimFiyatInput && tutarInput && iscilikTutariInput && hariciIscilikTutariInput) {
                // Değerleri parse et, yoksa 0 kullan
                const adet = parseFloat(adetInput.value) || 0;
                const birimFiyat = parseFloat(birimFiyatInput.value) || 0;
                const iscilikTutari = parseFloat(iscilikTutariInput.value) || 0;
                const hariciIscilikTutari = parseFloat(hariciIscilikTutariInput.value) || 0;

                // Toplam hesapla: (miktar * birim fiyat) + işçilik maliyetleri + harici işçilik maliyetleri
                const parcaTutari = adet * birimFiyat;
                const tutar = parcaTutari + iscilikTutari + hariciIscilikTutari;

                // Tutar girdisini güncelle
                tutarInput.value = tutar.toFixed(2);

                // Tüm toplamları yeniden hesapla
                calculateModalTotals();
            }
        }

        // Modal için toplam hesaplama fonksiyonu
        function calculateModalTotals() {
            let aToplam = 0;

            // Modaldaki tüm tutar girdilerini bul
            const tutarInputs = document.querySelectorAll('#modal-stok-hizmet-body input[name$=".Tutar"]');

            // Tüm tutar değerlerini topla
            tutarInputs.forEach(function(tutarInput) {
                aToplam += parseFloat(tutarInput.value) || 0;
            });

            updateModalTotals(aToplam);
        }

        // Modal toplamlarını güncelleme fonksiyonu
        function updateModalTotals(aToplam) {
            const vergi = aToplam * 0.20; // %20 vergi
            const gToplam = aToplam + vergi;

            const modalAToplam = document.getElementById('modal-a-toplam');
            const modalVergi = document.getElementById('modal-vergi');
            const modalGToplam = document.getElementById('modal-g-toplam');

            if (modalAToplam) modalAToplam.textContent = aToplam.toFixed(2);
            if (modalVergi) modalVergi.textContent = vergi.toFixed(2);
            if (modalGToplam) modalGToplam.textContent = gToplam.toFixed(2);
        }

        // Modal için yeni satır ekleme fonksiyonu
        function addModalRow() {
            const tbody = document.getElementById('modal-stok-hizmet-body');
            const rowCount = tbody.rows.length;

            const row = document.createElement('tr');
            row.innerHTML = `
                <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaNo" class="form-control form-control-sm"></td>
                <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaAdi" class="form-control form-control-sm"></td>
                <td><input type="number" name="StokHizmet[${rowCount}].Adet" value="0" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
                <td><input type="number" name="StokHizmet[${rowCount}].BirimFiyat" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                <td><input type="number" name="StokHizmet[${rowCount}].IscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                <td><input type="number" name="StokHizmet[${rowCount}].HariciIscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                <td><input type="number" name="StokHizmet[${rowCount}].Tutar" value="0" class="form-control form-control-sm" step="0.01" readonly></td>
                <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
            `;

            tbody.appendChild(row);
        }

        // Modal içindeki satır silme fonksiyonu
        function removeModalRow(button) {
            const tbody = document.getElementById('modal-stok-hizmet-body');

            // Eğer son satır ise silme
            if (tbody.rows.length > 1) {
                const row = button.closest('tr');
                tbody.removeChild(row);

                // Satır sildikten sonra toplamları güncelle
                calculateModalTotals();
            }
        }

        // Sayfa yüklendiğinde tüm işlevselliği başlat
        setupAccordionHandlers();
        setupEditButtonHandlers();

        // Modal içindeki ekle butonu için olay dinleyici ekle
        const modalAddRowBtn = document.getElementById('modal-add-row-btn');
        if (modalAddRowBtn) {
            modalAddRowBtn.addEventListener('click', addModalRow);
        }

        // Global kapsamda fonksiyonları tanımla
        window.calculateModalTutar = calculateModalTutar;
        window.removeModalRow = removeModalRow;
    });

        // Düzenleme butonları için olay dinleyicileri
        const editButtons = document.querySelectorAll('.evrak-duzenle-btn');
        editButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                event.stopPropagation();

                const evrakNo = this.getAttribute('data-evrakno');

                fetch(`/ServisHareketleri/GetEvrakDetayFull?evrakNo=${evrakNo}`)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.message || 'Bilinmeyen bir hata oluştu');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hata kontrolü
                        if (data.success === false) {
                            throw new Error(data.message || 'Bilinmeyen bir hata oluştu');
                        }

                        console.log("Gelen veri:", data); // Debug için veriyi göster

                        // Modal input alanlarını doldur
                        document.getElementById('modalEvrakNo').value = data.evrakNo || '';
                        document.getElementById('modalTarih').value = data.tarih || '';

                        // Evrak No ve Servis Merkezi veritabanından gelip değiştirilemez olmalı
                        const noInput = document.getElementById('modalNo');
                        noInput.value = data.no || '';
                        noInput.setAttribute('readonly', 'readonly');

                        const servisMerkeziSelect = document.getElementById('modalServisMerkezi');
                        servisMerkeziSelect.value = data.servisMerkezi || '';
                        servisMerkeziSelect.setAttribute('disabled', 'disabled');

                        // Diğer alanları doldur
                        document.getElementById('modalMusteriAdi').value = data.musteriAdi || '';
                        document.getElementById('modalSoforAdi').value = data.soforAdi || '';
                        document.getElementById('modalSoforTelefon').value = data.soforTelefon || '';
                        document.getElementById('modalPlakaNo').value = data.plakaNo || '';
                        document.getElementById('modalCihazMarkaModel').value = data.cihazMarkaModel || '';
                        document.getElementById('modalTeknisyenAdi').value = data.teknisyenAdi || '';
                        document.getElementById('modalCalismaSaati').value = data.calismaSaati || '';
                        document.getElementById('modalServiseGirisTarihi').value = data.serviseGirisTarihi || '';
                        document.getElementById('modalIsTuru').value = data.isTuru || '';
                        document.getElementById('modalIlkGozlem').value = data.ilkGozlem || '';

                        // Stok/Hizmet listesi tablosunu doldur
                        const tableBody = document.getElementById('modal-stok-hizmet-body');
                        tableBody.innerHTML = ''; // Önceki satırları temizle

                        // Detay kayıtları varsa tabloya ekle
                        const stokHizmetListesi = data.stokHizmetListesi || [];
                        console.log("Stok Hizmet Listesi:", stokHizmetListesi); // Debug için yazdır

                        if (stokHizmetListesi.length > 0) {
                            stokHizmetListesi.forEach((item, index) => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaNo" value="${item.yedekParcaNo || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaAdi" value="${item.yedekParcaAdi || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Adet" value="${item.adet || 0}" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].BirimFiyat" value="${item.birimFiyat || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].IscilikTutari" value="${item.iscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].HariciIscilikTutari" value="${item.hariciIscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Tutar" value="${item.tutar || 0}" class="form-control form-control-sm" step="0.01" readonly></td>
                                    <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
                                `;
                                tableBody.appendChild(row);
                            });
                        } else {
                            // Boş bir satır ekle
                            addModalRow();
                        }

                        // Toplam değerleri hesapla ve güncelle
                        calculateModalTotals();

                        // Modal'ı aç
                        const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                        editModal.show();
                    })
                    .catch(error => {
                        console.error('Detaylı Hata:', error);
                        alert(`Evrak bilgileri yüklenirken hata: ${error.message}`);
                    });
            });
        });

        // Red butonları için olay dinleyicileri
        const redButtons = document.querySelectorAll('.evrak-red-btn');
        redButtons.forEach(button => {
            button.addEventListener('click', function() {
                const evrakNo = parseInt(this.getAttribute('data-evrakno'));
                if (confirm('Bu evrakı reddetmek istediğinize emin misiniz?')) {
                    fetch('/ServisHareketleri/RedEvrak', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(evrakNo)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Evrak başarıyla reddedildi.');
                            location.reload();
                        } else {
                            alert('Bir hata oluştu: ' + data.message);
                        }
                    })
                    .catch(error => console.error('Hata:', error));
                }
            });
        });

        // Servis merkezi değişince evrak no getir
        const servisMerkeziSelect = document.querySelector("#modalServisMerkezi");
        if (servisMerkeziSelect) {
            servisMerkeziSelect.addEventListener('change', function() {
                const servisMerkezi = this.value;
                if (servisMerkezi) {
                    fetch(`/ServisHareketleri/GetNextEvrakNo?servisMerkezi=${servisMerkezi}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            document.querySelector(".no input").value = data.nextEvrakNo;
                        })
                        .catch(error => {
                            console.error('Error fetching Evrak No:', error);
                            alert("Evrak No alınırken bir hata oluştu.");
                        });
                } else {
                    document.querySelector(".no input").value = "";
                }
            });
        }

        // Kaydet butonu için olay dinleyici
        const saveChangesBtn = document.getElementById('saveChanges');
        if (saveChangesBtn) {
            saveChangesBtn.addEventListener('click', function() {
                // Disabled olan servisMerkezi alanını form gönderiminde kullanabilmek için geçici olarak enable yap
                const servisMerkeziSelect = document.getElementById('modalServisMerkezi');
                servisMerkeziSelect.removeAttribute('disabled');

                // Model verilerini al
                const modalFormData = {
                    EvrakNo: parseInt(document.getElementById('modalEvrakNo').value) || 0,
                    Tarih: document.getElementById('modalTarih').value,
                    Servis_Merkezi: servisMerkeziSelect.value,
                    No: parseInt(document.getElementById('modalNo').value) || 0,
                    MusteriAdi: document.getElementById('modalMusteriAdi').value,
                    SoforAdi: document.getElementById('modalSoforAdi').value,
                    SoforTelefon: document.getElementById('modalSoforTelefon').value,
                    PlakaNo: document.getElementById('modalPlakaNo').value,
                    CihazMarkaModel: document.getElementById('modalCihazMarkaModel').value,
                    TeknisyenAdi: document.getElementById('modalTeknisyenAdi').value,
                    CalismaSaati: parseInt(document.getElementById('modalCalismaSaati').value) || 0,
                    ServiseGirisTarihi: document.getElementById('modalServiseGirisTarihi').value,
                    IsTuru: document.getElementById('modalIsTuru').value,
                    IlkGozlem: document.getElementById('modalIlkGozlem').value
                };

                // İşlem sonrası tekrar disable yap
                servisMerkeziSelect.setAttribute('disabled', 'disabled');

                // Stok Hizmet listesini hazırla - IsEmirleri sınıfından gelen verilerle doldur
                const stokHizmetItems = [];
                const stokHizmetRows = document.querySelectorAll('#modal-stok-hizmet-body tr');

                stokHizmetRows.forEach((row, index) => {
                    const yedekParcaNo = row.querySelector('input[name$=".YedekParcaNo"]').value;
                    const yedekParcaAdi = row.querySelector('input[name$=".YedekParcaAdi"]').value;
                    const adet = parseInt(row.querySelector('input[name$=".Adet"]').value) || 0;
                    const birimFiyat = parseFloat(row.querySelector('input[name$=".BirimFiyat"]').value) || 0;
                    const iscilikTutari = parseFloat(row.querySelector('input[name$=".IscilikTutari"]').value) || 0;
                    const hariciIscilikTutari = parseFloat(row.querySelector('input[name$=".HariciIscilikTutari"]').value) || 0;
                    const tutar = parseFloat(row.querySelector('input[name$=".Tutar"]').value) || 0;

                    // Sadece geçerli satırları ekle (parça no veya adı dolu olanlar)
                    if (yedekParcaNo || yedekParcaAdi) {
                        // IsEmirleri sınıfından gelen özelliklerle doldur
                        stokHizmetItems.push({
                            EvrakNo: modalFormData.EvrakNo,
                            EvrakSiraNo: index + 2, // İlk satır 1, detay satırlar 2'den başlar
                            YedekParcaNo: yedekParcaNo,
                            YedekParcaAdi: yedekParcaAdi,
                            Adet: adet,
                            BirimFiyat: birimFiyat,
                            Tutar: tutar,
                            IscilikTutari: iscilikTutari,
                            HariciIscilikTutari: hariciIscilikTutari
                        });
                    }
                });

                // JSON formatında veri gönder
                fetch('/ServisHareketleri/UpdateEvrak', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: modalFormData,
                        stokHizmet: stokHizmetItems
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Başarıyla güncellendi');
                        location.reload();
                    } else {
                        alert('Güncelleme sırasında hata oluştu: ' + (data.message || 'Bilinmeyen bir hata'));
                    }
                })
                .catch(error => {
                    console.error('Hata:', error);
                    alert('Güncelleme sırasında bir hata oluştu.');
                });
            });
        }

        // Modal içindeki ekle butonu için olay dinleyici ekle
        const modalAddRowBtn = document.getElementById('modal-add-row-btn');
        if (modalAddRowBtn) {
            modalAddRowBtn.addEventListener('click', addModalRow);
        }
    });

    // Tutar hesaplama fonksiyonu
    function calculateTutar(input) {
        // Mevcut satırı al (parent tr elementi)
        const row = input.closest('tr');

        // Satırdaki değerleri al
        const adet = parseFloat(row.querySelector('input[name$=".Adet"]').value) || 0;
        const birimFiyat = parseFloat(row.querySelector('input[name$=".BirimFiyat"]').value) || 0;
        const iscilikTutari = parseFloat(row.querySelector('input[name$=".IscilikTutari"]').value) || 0;
        const hariciIscilikTutari = parseFloat(row.querySelector('input[name$=".HariciIscilikTutari"]').value) || 0;

        // Tutarı hesapla: ((adet*birimfiyat)+işçilik tutarı+harici işçilik tutarı)
        const tutar = ((adet * birimFiyat) + iscilikTutari + hariciIscilikTutari);

        // Tutar alanını güncelle
        row.querySelector('input[name$=".Tutar"]').value = tutar.toFixed(2);

        // Toplamları güncelle
        updateTotals();
    }

    // Toplamları güncelleme fonksiyonu
    function updateTotals() {
        // Tüm Tutar değerlerini al
        const tutarInputs = document.querySelectorAll('input[name$=".Tutar"]');
        let aToplamValue = 0;

        // Tüm Tutar değerlerini topla
        tutarInputs.forEach(input => {
            aToplamValue += parseFloat(input.value) || 0;
        });

        // Vergiyi hesapla (%20)
        const vergiValue = aToplamValue * 0.20;

        // Genel toplamı hesapla
        const gToplamValue = aToplamValue + vergiValue;

        // Görüntülenen değerleri güncelle
        const aToplamEl = document.getElementById('a-toplam');
        const vergiEl = document.getElementById('vergi');
        const gToplamEl = document.getElementById('g-toplam');

        if (aToplamEl) aToplamEl.textContent = aToplamValue.toFixed(2);
        if (vergiEl) vergiEl.textContent = vergiValue.toFixed(2);
        if (gToplamEl) gToplamEl.textContent = gToplamValue.toFixed(2);

        // Form gönderimi için gizli inputları güncelle
        const hiddenAToplamEl = document.getElementById('hidden-a-toplam');
        const hiddenVergiEl = document.getElementById('hidden-vergi');
        const hiddenGToplamEl = document.getElementById('hidden-g-toplam');

        if (hiddenAToplamEl) hiddenAToplamEl.value = aToplamValue.toFixed(2);
        if (hiddenVergiEl) hiddenVergiEl.value = vergiValue.toFixed(2);
        if (hiddenGToplamEl) hiddenGToplamEl.value = gToplamValue.toFixed(2);
    }

    // Yeni satır ekleme fonksiyonu
    function addRow() {
        const tbody = document.getElementById('stok-hizmet-body');
        const rowCount = tbody.rows.length;

        // İlk satırı klonla
        const newRow = tbody.rows[0].cloneNode(true);

        // İsim özniteliklerindeki indeksleri güncelle
        const inputs = newRow.querySelectorAll('input');
        inputs.forEach(input => {
            const name = input.getAttribute('name');
            input.setAttribute('name', name.replace(/\[\d+\]/, `[${rowCount}]`));
            input.value = ''; // Değeri temizle
        });

        // Yeni satırı ekle
        tbody.appendChild(newRow);
    }

    // Satır silme fonksiyonu
    function removeRow(button) {
        const tbody = document.getElementById('stok-hizmet-body');

        // Sadece bir satır varsa silme
        if (tbody.rows.length > 1) {
            const row = button.closest('tr');
            tbody.removeChild(row);

            // Satır sildikten sonra toplamları güncelle
            updateTotals();
        }
    }

    // Modal için yeni satır ekleme fonksiyonu
    function addModalRow() {
        const tbody = document.getElementById('modal-stok-hizmet-body');
        const rowCount = tbody.rows.length;

        const row = document.createElement('tr');
        row.innerHTML = `
            <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaNo" class="form-control form-control-sm"></td>
            <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaAdi" class="form-control form-control-sm"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].Adet" value="0" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].BirimFiyat" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].IscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].HariciIscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].Tutar" value="0" class="form-control form-control-sm" step="0.01" readonly></td>
            <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
        `;

        tbody.appendChild(row);
    }

    // Modal içindeki satır silme fonksiyonu
    function removeModalRow(button) {
        const tbody = document.getElementById('modal-stok-hizmet-body');

        // Eğer son satır ise silme
        if (tbody.rows.length > 1) {
            const row = button.closest('tr');
            tbody.removeChild(row);

            // Satır sildikten sonra toplamları güncelle
            calculateModalTotals();
        }
    }

    // Modal içindeki tutar hesaplama fonksiyonu
    function calculateModalTutar(inputElement) {
        const row = inputElement.closest('tr');

        // Gerekli tüm girdileri al
        const adetInput = row.querySelector('input[name$=".Adet"]');
        const birimFiyatInput = row.querySelector('input[name$=".BirimFiyat"]');
        const iscilikTutariInput = row.querySelector('input[name$=".IscilikTutari"]');
        const hariciIscilikTutariInput = row.querySelector('input[name$=".HariciIscilikTutari"]');
        const tutarInput = row.querySelector('input[name$=".Tutar"]');

        if (adetInput && birimFiyatInput && tutarInput && iscilikTutariInput && hariciIscilikTutariInput) {
            // Değerleri parse et, yoksa 0 kullan
            const adet = parseFloat(adetInput.value) || 0;
            const birimFiyat = parseFloat(birimFiyatInput.value) || 0;
            const iscilikTutari = parseFloat(iscilikTutariInput.value) || 0;
            const hariciIscilikTutari = parseFloat(hariciIscilikTutariInput.value) || 0;

            // Toplam hesapla: (miktar * birim fiyat) + işçilik maliyetleri + harici işçilik maliyetleri
            const parcaTutari = adet * birimFiyat;
            const tutar = parcaTutari + iscilikTutari + hariciIscilikTutari;

            // Tutar girdisini güncelle
            tutarInput.value = tutar.toFixed(2);

            // Tüm toplamları yeniden hesapla
            calculateModalTotals();
        }
    }

    // Modal için toplam hesaplama fonksiyonu
    function calculateModalTotals() {
        let aToplam = 0;

        // Modaldaki tüm tutar girdilerini bul
        const tutarInputs = document.querySelectorAll('#modal-stok-hizmet-body input[name$=".Tutar"]');

        // Tüm tutar değerlerini topla
        tutarInputs.forEach(function(tutarInput) {
            aToplam += parseFloat(tutarInput.value) || 0;
        });

        updateModalTotals(aToplam);
    }

    // Modal toplamlarını güncelleme fonksiyonu
    function updateModalTotals(aToplam) {
        const vergi = aToplam * 0.20; // %20 vergi
        const gToplam = aToplam + vergi;

        const modalAToplam = document.getElementById('modal-a-toplam');
        const modalVergi = document.getElementById('modal-vergi');
        const modalGToplam = document.getElementById('modal-g-toplam');

        if (modalAToplam) modalAToplam.textContent = aToplam.toFixed(2);
        if (modalVergi) modalVergi.textContent = vergi.toFixed(2);
        if (modalGToplam) modalGToplam.textContent = gToplam.toFixed(2);
    }
</script>
<!-- JS - Akordeon İşlevselliği -->
<script>
    document.querySelectorAll('.accordion-header').forEach(header => {
        header.addEventListener('click', () => {
            const content = header.closest('.accordion').querySelector('.accordion-content');
            const isVisible = content.style.display === 'block';

            // Tüm akordeon içeriklerini kapat
            document.querySelectorAll('.accordion-content').forEach(item => item.style.display = 'none');

            // Eğer görünmüyorsa aç
            if (!isVisible) {
                content.style.display = 'block';
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Düzenleme butonları için olay dinleyicileri
        const editButtons = document.querySelectorAll('.evrak-duzenle-btn');
        editButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                event.stopPropagation();

                const evrakNo = this.getAttribute('data-evrakno');

                fetch(`/ServisHareketleri/GetEvrakDetayFull?evrakNo=${evrakNo}`)
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.message || 'Bilinmeyen bir hata oluştu');
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hata kontrolü
                        if (data.success === false) {
                            throw new Error(data.message || 'Bilinmeyen bir hata oluştu');
                        }

                        // Modal input alanlarını doldur
                        document.getElementById('modalEvrakNo').value = data.evrakNo || '';
                        document.getElementById('modalTarih').value = data.tarih || '';

                        // Evrak No ve Servis Merkezi veritabanından gelip değiştirilemez olmalı
                        const noInput = document.getElementById('modalNo');
                        noInput.value = data.no || '';
                        noInput.setAttribute('readonly', 'readonly');

                        const servisMerkeziSelect = document.getElementById('modalServisMerkezi');
                        servisMerkeziSelect.value = data.servisMerkezi || '';
                        servisMerkeziSelect.setAttribute('disabled', 'disabled');

                        // Diğer alanları doldur
                        document.getElementById('modalMusteriAdi').value = data.musteriAdi || '';
                        document.getElementById('modalSoforAdi').value = data.soforAdi || '';
                        document.getElementById('modalSoforTelefon').value = data.soforTelefon || '';
                        document.getElementById('modalPlakaNo').value = data.plakaNo || '';
                        document.getElementById('modalCihazMarkaModel').value = data.cihazMarkaModel || '';
                        document.getElementById('modalTeknisyenAdi').value = data.teknisyenAdi || '';
                        document.getElementById('modalCalismaSaati').value = data.calismaSaati || '';
                        document.getElementById('modalServiseGirisTarihi').value = data.serviseGirisTarihi || '';
                        document.getElementById('modalIsTuru').value = data.isTuru || '';
                        document.getElementById('modalIlkGozlem').value = data.ilkGozlem || '';

                        // Stok/Hizmet listesi tablosunu doldur
                        const tableBody = document.getElementById('modal-stok-hizmet-body');
                        tableBody.innerHTML = ''; // Önceki satırları temizle

                        // Detay kayıtları varsa tabloya ekle
                        const stokHizmetListesi = data.stokHizmetListesi || [];
                        if (stokHizmetListesi.length > 0) {
                            stokHizmetListesi.forEach((item, index) => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaNo" value="${item.yedekParcaNo || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="text" name="StokHizmet[${index}].YedekParcaAdi" value="${item.yedekParcaAdi || ''}" class="form-control form-control-sm"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Adet" value="${item.adet || 0}" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].BirimFiyat" value="${item.birimFiyat || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].IscilikTutari" value="${item.iscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].HariciIscilikTutari" value="${item.hariciIscilikTutari || 0}" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
                                    <td><input type="number" name="StokHizmet[${index}].Tutar" value="${item.tutar || 0}" class="form-control form-control-sm" step="0.01" readonly></td>
                                    <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
                                `;
                                tableBody.appendChild(row);
                            });
                        } else {
                            // Boş bir satır ekle
                            addModalRow();
                        }

                        // Toplam değerleri hesapla ve güncelle
                        calculateModalTotals();

                        // Modal'ı aç
                        const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                        editModal.show();
                    })
                    .catch(error => {
                        console.error('Detaylı Hata:', error);
                        alert(`Evrak bilgileri yüklenirken hata: ${error.message}`);
                    });
            });
        });

        // Kaydet butonu için olay dinleyici
        const saveChangesBtn = document.getElementById('saveChanges');
        if (saveChangesBtn) {
            saveChangesBtn.addEventListener('click', function() {
                // Disabled olan servisMerkezi alanını form gönderiminde kullanabilmek için geçici olarak enable yap
                const servisMerkeziSelect = document.getElementById('modalServisMerkezi');
                servisMerkeziSelect.removeAttribute('disabled');

                // Model verilerini al
                const modalFormData = {
                    EvrakNo: parseInt(document.getElementById('modalEvrakNo').value) || 0,
                    Tarih: document.getElementById('modalTarih').value,
                    Servis_Merkezi: servisMerkeziSelect.value,
                    No: document.getElementById('modalNo').value,
                    MusteriAdi: document.getElementById('modalMusteriAdi').value,
                    SoforAdi: document.getElementById('modalSoforAdi').value,
                    SoforTelefon: document.getElementById('modalSoforTelefon').value,
                    PlakaNo: document.getElementById('modalPlakaNo').value,
                    CihazMarkaModel: document.getElementById('modalCihazMarkaModel').value,
                    TeknisyenAdi: document.getElementById('modalTeknisyenAdi').value,
                    CalismaSaati: parseInt(document.getElementById('modalCalismaSaati').value) || 0,
                    ServiseGirisTarihi: document.getElementById('modalServiseGirisTarihi').value,
                    IsTuru: document.getElementById('modalIsTuru').value,
                    IlkGozlem: document.getElementById('modalIlkGozlem').value
                };

                // İşlem sonrası tekrar disable yap
                servisMerkeziSelect.setAttribute('disabled', 'disabled');

                // Stok Hizmet listesini hazırla
                const stokHizmetItems = [];
                const stokHizmetRows = document.querySelectorAll('#modal-stok-hizmet-body tr');

                stokHizmetRows.forEach((row, index) => {
                    const yedekParcaNo = row.querySelector('input[name$=".YedekParcaNo"]').value;
                    const yedekParcaAdi = row.querySelector('input[name$=".YedekParcaAdi"]').value;
                    const adet = parseInt(row.querySelector('input[name$=".Adet"]').value) || 0;
                    const birimFiyat = parseFloat(row.querySelector('input[name$=".BirimFiyat"]').value) || 0;
                    const iscilikTutari = parseFloat(row.querySelector('input[name$=".IscilikTutari"]').value) || 0;
                    const hariciIscilikTutari = parseFloat(row.querySelector('input[name$=".HariciIscilikTutari"]').value) || 0;
                    const tutar = parseFloat(row.querySelector('input[name$=".Tutar"]').value) || 0;

                    // Sadece geçerli satırları ekle (parça no ve adı dolu olanlar)
                    if (yedekParcaNo || yedekParcaAdi) {
                        stokHizmetItems.push({
                            YedekParcaNo: yedekParcaNo,
                            YedekParcaAdi: yedekParcaAdi,
                            Adet: adet,
                            BirimFiyat: birimFiyat,
                            IscilikTutari: iscilikTutari,
                            HariciIscilikTutari: hariciIscilikTutari,
                            Tutar: tutar
                        });
                    }
                });

                // JSON formatında veri gönder
                fetch('/ServisHareketleri/UpdateEvrak', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: modalFormData,
                        stokHizmet: stokHizmetItems
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Başarıyla güncellendi');
                        location.reload();
                    } else {
                        alert('Güncelleme sırasında hata oluştu: ' + (data.message || 'Bilinmeyen bir hata'));
                    }
                })
                .catch(error => {
                    console.error('Hata:', error);
                    alert('Güncelleme sırasında bir hata oluştu.');
                });
            });
        }

        // Modal içindeki ekle butonu için olay dinleyici ekle
        const modalAddRowBtn = document.getElementById('modal-add-row-btn');
        if (modalAddRowBtn) {
            modalAddRowBtn.addEventListener('click', addModalRow);
        }
    });

    // Modal için yeni satır ekleme fonksiyonu
    function addModalRow() {
        const tbody = document.getElementById('modal-stok-hizmet-body');
        const rowCount = tbody.rows.length;

        const row = document.createElement('tr');
        row.innerHTML = `
            <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaNo" class="form-control form-control-sm"></td>
            <td><input type="text" name="StokHizmet[${rowCount}].YedekParcaAdi" class="form-control form-control-sm"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].Adet" value="0" class="form-control form-control-sm" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].BirimFiyat" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].IscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].HariciIscilikTutari" value="0" class="form-control form-control-sm" step="0.01" oninput="calculateModalTutar(this)"></td>
            <td><input type="number" name="StokHizmet[${rowCount}].Tutar" value="0" class="form-control form-control-sm" step="0.01" readonly></td>
            <td><button type="button" class="btn btn-danger btn-sm" onclick="removeModalRow(this)">Sil</button></td>
        `;

        tbody.appendChild(row);
    }

    // Modal içindeki satır silme fonksiyonu
    function removeModalRow(button) {
        const tbody = document.getElementById('modal-stok-hizmet-body');

        // Eğer son satır ise silme
        if (tbody.rows.length > 1) {
            const row = button.closest('tr');
            tbody.removeChild(row);

            // Satır sildikten sonra toplamları güncelle
            calculateModalTotals();
        }
    }

    // Modal içindeki tutar hesaplama fonksiyonu
    function calculateModalTutar(inputElement) {
        const row = inputElement.closest('tr');

        // Gerekli tüm girdileri al
        const adetInput = row.querySelector('input[name$=".Adet"]');
        const birimFiyatInput = row.querySelector('input[name$=".BirimFiyat"]');
        const iscilikTutariInput = row.querySelector('input[name$=".IscilikTutari"]');
        const hariciIscilikTutariInput = row.querySelector('input[name$=".HariciIscilikTutari"]');
        const tutarInput = row.querySelector('input[name$=".Tutar"]');

        if (adetInput && birimFiyatInput && tutarInput && iscilikTutariInput && hariciIscilikTutariInput) {
            // Değerleri parse et, yoksa 0 kullan
            const adet = parseFloat(adetInput.value) || 0;
            const birimFiyat = parseFloat(birimFiyatInput.value) || 0;
            const iscilikTutari = parseFloat(iscilikTutariInput.value) || 0;
            const hariciIscilikTutari = parseFloat(hariciIscilikTutariInput.value) || 0;

            // Toplam hesapla: (miktar * birim fiyat) + işçilik maliyetleri + harici işçilik maliyetleri
            const parcaTutari = adet * birimFiyat;
            const tutar = parcaTutari + iscilikTutari + hariciIscilikTutari;

            // Tutar girdisini güncelle
            tutarInput.value = tutar.toFixed(2);

            // Tüm toplamları yeniden hesapla
            calculateModalTotals();
        }
    }

    // Modal için toplam hesaplama fonksiyonu
    function calculateModalTotals() {
        let aToplam = 0;

        // Modaldaki tüm tutar girdilerini bul
        const tutarInputs = document.querySelectorAll('#modal-stok-hizmet-body input[name$=".Tutar"]');

        // Tüm tutar değerlerini topla
        tutarInputs.forEach(function(tutarInput) {
            aToplam += parseFloat(tutarInput.value) || 0;
        });

        updateModalTotals(aToplam);
    }

    // Modal toplamlarını güncelleme fonksiyonu
    function updateModalTotals(aToplam) {
        const vergi = aToplam * 0.20; // %20 vergi
        const gToplam = aToplam + vergi;

        const modalAToplam = document.getElementById('modal-a-toplam');
        const modalVergi = document.getElementById('modal-vergi');
        const modalGToplam = document.getElementById('modal-g-toplam');

        if (modalAToplam) modalAToplam.textContent = aToplam.toFixed(2);
        if (modalVergi) modalVergi.textContent = vergi.toFixed(2);
        if (modalGToplam) modalGToplam.textContent = gToplam.toFixed(2);
    }
</script>
<!-- JS - Red İşlevi ve Diğer İşlemler -->
<script>


    document.querySelectorAll('.evrak-red-btn').forEach(button => {
        button.addEventListener('click', () => {
            const evrakNo = parseInt(button.getAttribute('data-evrakno'));
            if (confirm('Bu evrakı reddetmek istediğinize emin misiniz?')) {
                fetch('/ServisHareketleri/RedEvrak', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(evrakNo)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Evrak başarıyla reddedildi.');
                            location.reload();
                        } else {
                            alert('Bir hata oluştu: ' + data.message);
                        }
                    })
                    .catch(error => console.error('Hata:', error));
            }
        });
    });

    document.querySelectorAll('.satir-red-btn').forEach(button => {
        button.addEventListener('click', () => {
            const evrakNo = parseInt(button.getAttribute('data-evrakno'));
            const evrakSiraNo = parseInt(button.getAttribute('data-evraksirano'));
            if (confirm('Bu satırı reddetmek istediğinize emin misiniz?')) {
                fetch('/ServisHareketleri/RedSatir', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ evrakNo: evrakNo, evrakSiraNo: evrakSiraNo })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Satır başarıyla reddedildi.');
                            location.reload();
                        } else {
                            alert('Bir hata oluştu: ' + data.message);
                        }
                    })
                    .catch(error => console.error('Hata:', error));
            }
        });
    });




</script>
<script>
    document.getElementById("modalServisMerkezi").addEventListener("change", function () {
        var servisMerkezi = this.value;

        if (servisMerkezi) {
            fetch(`/ServisHareketleri/GetNextEvrakNo?servisMerkezi=${servisMerkezi}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    document.querySelector(".no input").value = data.nextEvrakNo;
                })
                .catch(error => {
                    console.error('Error fetching Evrak No:', error);
                    alert("Evrak No alınırken bir hata oluştu.");
                });
        } else {
            document.querySelector(".no input").value = "";
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Tüm akordeon başlıklarını seç
        const accordionHeaders = document.querySelectorAll('.accordion-header');

        // Her başlığa tıklama olayı ekle
        accordionHeaders.forEach(header => {
            header.addEventListener('click', function (e) {
                // Eğer tıklanan element buton değilse
                if (!e.target.closest('button')) {
                    // Bir sonraki elementi bul (content kısmı)
                    const content = this.nextElementSibling;

                    // Display durumunu kontrol et ve toggle yap
                    if (content.style.display === 'none' || content.style.display === '') {
                        content.style.display = 'table-row';
                    } else {
                        content.style.display = 'none';
                    }
                }
            });
        });

        // Butonlara tıklandığında yayılmayı engelle
        const buttons = document.querySelectorAll('.btn');
        buttons.forEach(button => {
            button.addEventListener('click', function (e) {
                e.stopPropagation();
            });
        });
    });
</script>